import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import splev, splrep
from numpy import genfromtxt

def density_dmo():
    plt.figure(figsize=(20, 20))
    density_dmo = np.loadtxt("density_dmo.txt", unpack=True)
    plt.plot(density_dmo[0], density_dmo[1], label="density profile - dmo")
    plt.legend(loc="lower right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel(r'$r[Mpc/h]$', fontsize=30)
    plt.ylabel(r'$\rho(r)/\rho_0$', fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/density profile - dmo - 1")
    plt.show()

def density_dmb():
    plt.figure(figsize=(20, 20))
    density_dmb = np.loadtxt("density_dmb.txt", unpack=True)
    plt.plot(density_dmb[0], density_dmb[1], label="density profile - dmb - gas")
    plt.plot(density_dmb[0], density_dmb[2], label="density profile - dmb - cga")
    plt.plot(density_dmb[0], density_dmb[3], label="density profile - dmb - clm")
    plt.plot(density_dmb[0], density_dmb[4], label="density profile - dmb")
    plt.legend(loc="lower right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$r[Mpc/h]$", fontsize=30)
    plt.ylabel(r'$\rho(r)$', fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.ylim(10 ** 8, 10 ** 19)
    plt.savefig("plots_2/density profile - dmb - 5")
    plt.show()


def density_dmb_2():
    plt.figure(figsize=(60, 40))
    ax1 = plt.subplot(3, 2, 1)
    ax2 = plt.subplot(3, 2, 2)
    ax3 = plt.subplot(3, 2, 3)
    ax4 = plt.subplot(3, 2, 4)
    ax5 = plt.subplot(3, 2, 5)
    plt.sca(ax1)
    for name in [11, 12, 13, 14, 15, 16]:
        density_dmb = np.loadtxt("data_profiles/density_dmb_%s.txt"%name, unpack=True)
        plt.plot(density_dmb[0], density_dmb[1], label=r"$\rho^{dmb}(r) - M=10^{%s}M_\odot/h$"%name)
    plt.legend(loc="lower left", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$r[Mpc/h]$", fontsize=40)
    plt.ylabel(r'$\rho(r)$', fontsize=40)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.ylim(10 ** 8, 10 ** 19)

    plt.sca(ax2)
    for name in [11, 12, 13, 14, 15, 16]:
        density_dmb = np.loadtxt("data_profiles/density_dmb_%s.txt"%name, unpack=True)
        plt.plot(density_dmb[0], density_dmb[2], label=r"$\rho_{cga}^{dmb}(r) - M=10^{%s}M_\odot/h$"%name)
    plt.legend(loc="upper right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$r[Mpc/h]$", fontsize=40)
    plt.ylabel(r'$\rho(r)$', fontsize=40)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.ylim(10 ** 8, 10 ** 19)
    plt.xlim(0.001, 10)

    plt.sca(ax3)
    for name in [11, 12, 13, 14, 15, 16]:
        density_dmb = np.loadtxt("data_profiles/density_dmb_%s.txt"%name, unpack=True)
        plt.plot(density_dmb[0], density_dmb[3], label=r"$\rho_{stellar}^{dmb}(r) - M=10^{%s}M_\odot/h$" % name)
    plt.legend(loc="upper right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$r[Mpc/h]$", fontsize=40)
    plt.ylabel(r'$\rho(r)$', fontsize=40)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.ylim(10 ** 8, 10 ** 19)
    plt.xlim(0.001, 10)

    plt.sca(ax4)
    for name in [11, 12, 13, 14, 15, 16]:
        density_dmb = np.loadtxt("data_profiles/density_dmb_%s.txt"%name, unpack=True)
        plt.plot(density_dmb[0], density_dmb[4], label=r"$\rho_{gas}^{dmb}(r) - M=10^{%s}M_\odot/h$" % name)
    plt.legend(loc="upper right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$r[Mpc/h]$", fontsize=40)
    plt.ylabel(r'$\rho(r)$', fontsize=40)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.ylim(10 ** 5, 10 ** 16)
    plt.xlim(0.001, 10)

    plt.sca(ax5)
    for name in [11, 12, 13, 14, 15, 16]:
        density_dmb = np.loadtxt("data_profiles/density_dmb_%s.txt"%name, unpack=True)
        plt.plot(density_dmb[0], density_dmb[5], label=r"$\rho_{clm}^{dmb}(r) - M=10^{%s}M_\odot/h$" % name)
    plt.legend(loc="upper right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$r[Mpc/h]$", fontsize=40)
    plt.ylabel(r'$\rho(r)$', fontsize=40)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.ylim(10 ** 8, 10 ** 19)
    plt.xlim(0.001, 10)

    plt.savefig("plots_3/density profile - dmb - 4.pdf")
    plt.show()

def comparison_density():
    density_dmo = np.loadtxt("density_dmo.txt", unpack=True)
    density_dmb = np.loadtxt("density_dmb.txt", unpack=True)
    dmoo = density_dmo[1] / max(density_dmo[1])
    dmbb = density_dmb[4] / max(density_dmb[4])
    ratio = dmbb / dmoo
    plt.figure(figsize=(20, 20))
    #plt.plot(density_dmo[0], ratio, label="density profile comparison")
    plt.plot(density_dmo[0], density_dmo[1], label="dmo")
    plt.plot(density_dmb[0], density_dmb[1], label="dmb - gas")
    plt.plot(density_dmb[0], density_dmb[2], label="dmb - cga")
    plt.plot(density_dmb[0], density_dmb[3], label="dmb - clm")
    #plt.plot(density_dmb[0], density_dmb[1] + density_dmb[2] + density_dmb[3], label="dmb - total")
    plt.plot(density_dmb[0], density_dmb[4], label="dmb - total")
    plt.legend(loc="upper right", fontsize=40)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$r[Mpc/h]$", fontsize=40)
    plt.ylabel(r'$\rho(r)$', fontsize=40)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.ylim(10**8, 10**19)
    plt.savefig("plots_3/density profile - comparison - 1.pdf")
    plt.show()

def comparison_density_2():
    density_dmo = np.loadtxt("density_dmo.txt", unpack=True)
    density_dmb = np.loadtxt("density_dmb.txt", unpack=True)
    dmoo = density_dmo[1] / max(density_dmo[1])
    dmbb = density_dmb[4] / max(density_dmb[4])
    ratio = dmbb / dmoo
    plt.figure(figsize=(20, 20))
    #plt.plot(density_dmo[0], ratio, label="density profile comparison")
    plt.plot(density_dmo[0], density_dmo[0]**2 * density_dmo[1], label="dmo")
    plt.plot(density_dmb[0], density_dmb[0]**2 * density_dmb[4], label="dmb - total")
    plt.legend(loc="upper right", fontsize=40)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$r[Mpc/h]$", fontsize=40)
    plt.ylabel(r'$r^2\rho(r)$', fontsize=40)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.xlim(0.01, 10)
    plt.ylim(10**10, 10**13)
    plt.savefig("plots_2/density profile - comparison - 3")
    plt.show()

def ratio_density():
    density_dmo = np.loadtxt("density_dmo.txt", unpack=True)
    density_dmb = np.loadtxt("density_dmb.txt", unpack=True)
    dmoo = density_dmo[1] / max(density_dmo[1])
    dmbb = density_dmb[4] / max(density_dmb[4])
    #ratio = dmbb / density_dmo[1]
    ratio = density_dmb[4] / density_dmo[1]
    plt.figure(figsize=(20, 20))
    plt.plot(density_dmb[0], ratio, label="ratio - dmb/dmo")
    plt.legend(loc="lower right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$r[Mpc/h]$", fontsize=30)
    plt.ylabel(r'$\rho_{dmo}(r)/\rho_{dmb}(r)$', fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/density profile - comparison - 2")
    plt.show()

def u_func():
    plt.figure(figsize=(20, 20))
    i = 10
    for name in [10**10,10**11,10**12,10**13,10**14,10**15,10**16]:
        uu = np.loadtxt("uu_test_%s.txt"%name, unpack=True)
        plt.plot(uu[0], uu[1], label=r'$M=10^{%s}M_\odot/h$'%i)
        i = i + 1
    plt.legend(loc="lower left", fontsize=40)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$k[hMpc^{-1}]$", fontsize=40)
    plt.ylabel(r'$u(k|M)$', fontsize=40)
    plt.xlim(0.01, 1000)
    plt.ylim(0.01, 1.1)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.savefig("plots_2/u_func")
    plt.show()

def u_func_b():
    plt.figure(figsize=(20, 20))
    i = 10
    for name in [10**10,10**11,10**12,10**13,10**14,10**15,10**16]:
        uu = np.loadtxt("uu_test_b_%s.txt"%name, unpack=True)
        plt.plot(uu[0], uu[1]/max(uu[1]), label=r'$M=10^{%s}M_\odot/h$'%i)
        i = i + 1
    plt.legend(loc="lower left", fontsize=40)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$k[hMpc^{-1}]$", fontsize=40)
    plt.ylabel(r'$u_b(k|M)$', fontsize=40)
    plt.xlim(0.01, 1000)
    plt.ylim(0.01, 1.1)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.savefig("plots_2/u_func_b")
    plt.show()

def P_dmo_1h_2h():
    plt.figure(figsize=(20, 20))
    P = np.loadtxt("data_profiles/powspec_dmo_test.txt", unpack=True)
    plt.plot(P[0], P[1], label="dmo $P_{1h}$")
    plt.plot(P[0], P[2], label="dmo $P_{2h}$")
    plt.plot(P[0], P[1] + P[2], label="dmo $P_{1h} + P_{2h}$")

    P_lin = np.loadtxt("linear_powerspectrom/Pnw_2.dat", unpack=True)
    plt.plot(P_lin[0], P_lin[1], label="$P_{linear}$")

    #plt.plot(P[0], P[3], label="power - spectrum - dmo_2h_2")
    plt.legend(loc="lower left", fontsize=40)
    plt.xlim(0.0005, 100)
    plt.ylim(0.0000001, 100000)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$k[hMpc^{-1}]$", fontsize=40)
    plt.ylabel("$P(k)$", fontsize=40)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.savefig("plots_2/power - spectrum - dmo_1h_2h - 1")
    plt.show()

def P_dmo_2h():
    plt.figure(figsize=(20, 20))
    P = np.loadtxt("data_profiles/powspec_dmo_test_3.txt", unpack=True)
    plt.plot(P[0], abs(P[2]), label="power - spectrum - dmo_2h")
    plt.legend(loc="lower right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$k[hMpc^{-1}]$", fontsize=30)
    plt.ylabel("$P(k)$", fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/power - spectrum - dmo_2h - 1")
    plt.show()

def P_dmb_1h_2h():
    plt.figure(figsize=(20, 20))
    P = np.loadtxt("data_profiles/powspec_dmb_test.txt", unpack=True)
    plt.plot(P[0], P[1], label="dmb $P_{1h}$")
    plt.plot(P[0], P[2], label="dmb $P_{2h}$")
    plt.plot(P[0], P[1]+P[2], label="dmb $P_{1h} + P_{2h}$")

    P_lin = np.loadtxt("linear_powerspectrom/Pnw_2.dat", unpack=True)
    plt.plot(P_lin[0], P_lin[1], label="$P_{linear}$")

    plt.legend(loc="lower left", fontsize=40)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlim(0.0005, 100)
    plt.ylim(0.0000001, 100000)
    plt.xlabel("$k[hMpc^{-1}]$", fontsize=40)
    plt.ylabel("$P(k)$", fontsize=40)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.savefig("plots_2/power - spectrum - dmb_1h_2h - 1")
    plt.show()

def P_dmo():
    plt.figure(figsize=(20, 20))
    P = np.loadtxt("powspec_dmo_test_3.txt", unpack=True)
    plt.plot(P[0], P[1], label="power - spectrum - dmo 1h")
    #plt.plot(P[0], P[2], label="power - spectrum - dmo 2h")
    #plt.plot(P[0], P[3], label="power - spectrum - dmo 1h + 2h")
    plt.legend(loc="lower right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$k[hMpc^{-1}]$", fontsize=30)
    plt.ylabel("$P(k)$", fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/power - spectrum - dmo_1h - 1")
    plt.show()

def P_linear():
    plt.figure(figsize=(20, 20))
    P_lin = np.loadtxt("linear_powerspectrom/Pnw_2.dat", unpack=True)
    P_hh = np.loadtxt("P_hh.txt", unpack=True)
    plt.plot(P_lin[0], P_lin[1], label="power - spectrum - linear")
    plt.plot(P_hh[0], P_hh[1], label="power - spectrum - P_hh")
    #plt.plot(P[0], P[2], label="power - spectrum - dmo 2h")
    #plt.plot(P[0], P[3], label="power - spectrum - dmo 1h + 2h")
    plt.legend(loc="lower right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$k[hMpc^{-1}]$", fontsize=30)
    plt.ylabel("$P(k)$", fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/power - spectrum - linear - 1")
    plt.show()


def P_dmb():
    plt.figure(figsize=(20, 20))
    P = np.loadtxt("powspec_dmb_test_2.txt", unpack=True)
    plt.plot(P[0], P[1], label="power - spectrum - dmb 1h")
    #plt.plot(P[0], P[2], label="power - spectrum - dmb 2h")
    #plt.plot(P[0], P[3], label="power - spectrum - dmb 1h + 2h")
    plt.legend(loc="lower right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$k[hMpc^{-1}]$", fontsize=30)
    plt.ylabel("$P(k)$", fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/power - spectrum - dmb_1h - 1")
    plt.show()

def comparison():
    P_dmb_1 = np.loadtxt("data_profiles/powspec_dmb_test.txt", unpack=True)
    P_dmb_2 = np.loadtxt("data_profiles/powspec_dmb_test_z_1.txt", unpack=True)
    P_dmb_3 = np.loadtxt("data_profiles/powspec_dmb_test_z_2.txt", unpack=True)
    P_dmb_4 = np.loadtxt("data_profiles/powspec_dmb_test_z_3.txt", unpack=True)
    P_dmb_5 = np.loadtxt("data_profiles/powspec_dmb_test_z_4.txt", unpack=True)
    P_dmo_1 = np.loadtxt("data_profiles/powspec_dmo_test.txt", unpack=True)
    P_dmo_2 = np.loadtxt("data_profiles/powspec_dmo_test_z_1.txt", unpack=True)
    P_dmo_3 = np.loadtxt("data_profiles/powspec_dmo_test_z_2.txt", unpack=True)
    P_dmo_4 = np.loadtxt("data_profiles/powspec_dmo_test_z_3.txt", unpack=True)
    P_dmo_5 = np.loadtxt("data_profiles/powspec_dmo_test_z_4.txt", unpack=True)
    #P_dmb_aurel_1 = genfromtxt("data_profiles/Dataset_aurel.csv", delimiter=',')
    #np.savetxt('data_profiles/Dataset_aurel.txt', P_dmb_aurel_1, fmt='%.8g')
    P_dmb_aurel = np.loadtxt("data_profiles/Dataset_aurel.txt", unpack=True)

    P_dmoo_1 = P_dmo_1[3] / max(P_dmo_1[3])
    P_dmoo_2 = P_dmo_1[3] / max(P_dmo_2[3])
    P_dmoo_3 = P_dmo_1[3] / max(P_dmo_3[3])
    P_dmoo_4 = P_dmo_1[3] / max(P_dmo_4[3])
    P_dmoo_5 = P_dmo_1[3] / max(P_dmo_5[3])

    P_dmbb_1 = P_dmb_1[3] / max(P_dmb_1[3])
    P_dmbb_2 = P_dmb_2[3] / max(P_dmb_2[3])
    P_dmbb_3 = P_dmb_3[3] / max(P_dmb_3[3])
    P_dmbb_4 = P_dmb_4[3] / max(P_dmb_4[3])
    P_dmbb_5 = P_dmb_5[3] / max(P_dmb_5[3])
    #ratio = P_dmb_3[3] / P_dmo[3]
    ratio_1 =P_dmbb_1/ P_dmoo_1
    #ratio_2 =P_dmbb_2/ P_dmoo_2
    #ratio_3 =P_dmbb_3/ P_dmoo_3
    #ratio_4 =P_dmbb_4/ P_dmoo_4
    #ratio_5 =P_dmbb_5/ P_dmoo_5

    #plt.plot(P_dmb_1[0], ratio, label=r'$M_c=1\times10^{13}M_{\odot}$')
    #print(ratio_1)
    fig = plt.figure(figsize=(40, 40))
    fig.suptitle('Power spectra ratio of dmb and dmo', fontsize=60, fontweight='bold')
    plt.subplot(2, 1, 1)
    ax = plt.gca()
    ax.loglog(P_dmb_aurel[0], P_dmb_aurel[1], color='dodgerblue', linewidth=2, label=r'N-body simulation')
    TT = splrep(P_dmb_1[0], ratio_1)
    ax.loglog(P_dmb_aurel[0], splev(P_dmb_aurel[0], TT), color='red', linewidth=2, label=r'In this study')
    ax.set_title('z = 0', fontsize=34)
    ax.set_yscale("linear")
    ax.set_xlabel(r'$k$', fontsize=34)
    ax.set_ylabel(r'$\frac{P_{dmb}(k)}{P_{dmo}(k)}$', fontsize=34)
    ax.set_xlim(left=0.1, right=20)
    ax.set_ylim(bottom=0.6, top=1.1)
    for tick in ax.xaxis.get_major_ticks():
        tick.label.set_fontsize(30)
        tick.label.set_fontweight('black')
    for tick in ax.yaxis.get_major_ticks():
        tick.label.set_fontsize(30)
        tick.label.set_fontweight('black')
    plt.legend(loc='best', fontsize=30)

    plt.subplot(2, 1, 2)
    ax = plt.gca()
    #ax.loglog(P_dmb_aurel[0], P_dmb_aurel[1], color='dodgerblue', linewidth=2, label=r'N-body simulation')
    TT = splrep(P_dmb_1[0], ratio_1)
    ax.loglog(P_dmb_1[0], splev(P_dmb_1[0], TT), color='red', linewidth=2, label=r'In this study')
    ax.set_title('z = 0', fontsize=34)
    ax.set_yscale("linear")
    ax.set_xlabel(r'$k$', fontsize=34)
    ax.set_ylabel(r'$\frac{P_{dmb}(k)}{P_{dmo}(k)}$', fontsize=34)
    # ax.set_xlim(left=0.01, right=20)
    # ax.set_ylim(bottom=0.5, top=1.2)
    for tick in ax.xaxis.get_major_ticks():
        tick.label.set_fontsize(30)
        tick.label.set_fontweight('black')
    for tick in ax.yaxis.get_major_ticks():
        tick.label.set_fontsize(30)
        tick.label.set_fontweight('black')
    plt.legend(loc='best', fontsize=30)

    #plt.plot(P_dmb_1[0], ratio_1, label=r'$z=0$')
    #plt.plot(P_dmb_1[0], ratio_2, label=r'$z=1$')
    #plt.plot(P_dmb_1[0], ratio_3, label=r'$z=2$')
    #plt.plot(P_dmb_1[0], ratio_4, label=r'$z=3$')
    #plt.plot(P_dmb_1[0], ratio_5, label=r'$z=4$')

    #plt.plot(P_dmb_1[0], ratio_5, label=r'$\theta_{ej}=8$')
    #plt.plot(P_dmb_1[0], ratio_5, label=r'$M_c=1\times10^{14}M_{\odot}/h$')
    #plt.plot(P_dmb_1[0], ratio_2, label=r'$\mu=0.2$')
    #plt.plot(P_dmb_1[0], ratio_1, label=r'$a=0.68,n=1$')
    #plt.plot(P_dmb_1[0], ratio_2, label=r'$a=0.3,n=2$')


    plt.savefig("plots_3/power - spectrum - comparison - aurel and TT - 9.pdf")
    plt.show()


def comparison_2():
    P_dmb_1 = np.loadtxt("data_profiles/powspec_dmb_test.txt", unpack=True)
    P_dmo = np.loadtxt("data_profiles/powspec_dmo_test.txt", unpack=True)
    P_dmoo = P_dmo[3] / max(P_dmo[3])
    P_dmbb_1 = P_dmb_1[3] / max(P_dmb_1[3])
    #ratio = P_dmb_1[3] / P_dmo[3]
    ratio = P_dmbb_1 / P_dmoo

    fig = plt.figure(figsize=(40, 40))
    fig.suptitle('Power spectra ratio of dmb and dmo', fontsize=60, fontweight='bold')
    plt.subplot(2, 1, 1)
    ax = plt.gca()
    ax.loglog(P_dmb_1[0], ratio, color='dodgerblue', linewidth=2, label=r'$M_c=1\times10^{13}M_{\odot}$')
    ax.set_title('z = 0', fontsize=34)
    ax.set_yscale("linear")
    ax.set_xlabel(r'$k$', fontsize=34)
    ax.set_ylabel(r'$\frac{P_{dmb}(k)}{P_{dmo}(k)}$', fontsize=34)
    ax.set_xlim(left=0.1, right=20)
    ax.set_ylim(bottom=0.6, top=1.1)
    for tick in ax.xaxis.get_major_ticks():
        tick.label.set_fontsize(30)
        tick.label.set_fontweight('black')
    for tick in ax.yaxis.get_major_ticks():
        tick.label.set_fontsize(30)
        tick.label.set_fontweight('black')
    plt.legend(loc='best', fontsize=30)

    fig = plt.figure(figsize=(40, 40))
    fig.suptitle('Power spectra ratio of dmb and dmo', fontsize=60, fontweight='bold')
    plt.subplot(2, 1, 2)
    ax = plt.gca()
    ax.loglog(P_dmb_1[0], ratio, color='dodgerblue', linewidth=2, label=r'$M_c=1\times10^{13}M_{\odot}$')
    ax.set_title('z = 0', fontsize=34)
    ax.set_yscale("linear")
    ax.set_xlabel(r'$k$', fontsize=34)
    ax.set_ylabel(r'$\frac{P_{dmb}(k)}{P_{dmo}(k)}$', fontsize=34)
    # ax.set_xlim(left=0.01, right=20)
    # ax.set_ylim(bottom=0.5, top=1.2)
    for tick in ax.xaxis.get_major_ticks():
        tick.label.set_fontsize(30)
        tick.label.set_fontweight('black')
    for tick in ax.yaxis.get_major_ticks():
        tick.label.set_fontsize(30)
        tick.label.set_fontweight('black')
    plt.legend(loc='best', fontsize=30)
    plt.savefig("plots_2/power - spectrum - comparison - 8")
    plt.show()

def halo_mass_function():
    plt.figure(figsize=(20, 20))
    n = np.loadtxt("halo mass function.txt", unpack=True)
    plt.plot(n[0], abs(n[1]), label="halo mass function - dmo")
    plt.legend(loc="lower right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$Mass[M_{\odot}]$", fontsize=30)
    plt.ylabel("$dn(M)/dM$", fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_3/halo mass function - dmo - 1.pdf")
    plt.show()

def dn_dm_function():
    plt.figure(figsize=(20, 20))
    M,n = np.loadtxt("halo mass function.txt", unpack=True)
    M_2, n_2 = np.loadtxt("halo mass function_2.txt", unpack=True)
    """
    N_func = splrep(M,n)
    dn = splev(M,N_func,der=1)
    plt.plot(M, abs(dn) * M, label="halo mass function - dmo")
    """
    plt.plot(M, n*M, label="halo mass function - Sheth & Tormen")
    plt.plot(M_2, n_2 * M_2, label="halo mass function - Press & Schechter")
    plt.legend(loc="lower left", fontsize=40)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$Mass[M_{\odot}/h]$", fontsize=40)
    plt.ylabel("$dn/dlnM$", fontsize=40)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.savefig("plots_3/halo mass function - dmo - 2.pdf")
    plt.show()

def sigma_2():
    plt.figure(figsize=(20, 20))
    sigma_2 = np.loadtxt("variance cosmic density field.txt", unpack=True)
    plt.plot(sigma_2[0], abs(sigma_2[1]), label="variance of cosmic density field")
    plt.legend(loc="upper right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$Mass[M_{\odot}]$", fontsize=30)
    plt.ylabel("$\sigma(M)^2$", fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_3/variance cosmic density field sigma - dmo - 1.pdf")
    plt.show()

def sigma_2_2():
    plt.figure(figsize=(20, 20))
    sigma_2 = np.loadtxt("variance cosmic density field.txt", unpack=True)
    plt.plot(sigma_2[2], abs(sigma_2[1]), label="variance of cosmic density field")
    plt.legend(loc="upper right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$R[Mpc/h]$", fontsize=30)
    plt.ylabel("$\sigma(M)^2$", fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_3/variance cosmic density field sigma - dmo - 2.pdf")
    plt.show()

def bias():
    plt.figure(figsize=(20, 20))
    biass = np.loadtxt("halo bias.txt", unpack=True)
    #plt.plot(biass[0], abs(biass[2]), label="b1 - dmo")
    #plt.plot(biass[0], biass[3], label="b2 - dmo")
    plt.plot(biass[1], biass[2], label="b1 - dmo")
    plt.plot(biass[1], biass[3], label="b2 - dmo")
    plt.legend(loc="lower right", fontsize=30)
    #plt.xscale("log")
    #plt.yscale("log")
    plt.xlabel("$v$", fontsize=30)
    plt.xlim(0, 8)
    plt.ylim(-1, 10)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/halo bias - dmo - 2")
    plt.show()

def bias_2():
    plt.figure(figsize=(20, 20))
    biass = np.loadtxt("halo bias_2.txt", unpack=True)
    #plt.plot(biass[0], abs(biass[2]), label="b1 - dmo")
    #plt.plot(biass[0], biass[3], label="b2 - dmo")
    plt.plot(biass[0][:90], biass[2][:90], label="b1")
    plt.plot(biass[0][:90], biass[3][:90], label="b2")
    plt.legend(loc="lower right", fontsize=40)
    plt.xscale("log")
    #plt.yscale("log")
    plt.xlabel("$Mass[M_{\odot}/h]$", fontsize=40)
    plt.ylabel("$bias$", fontsize=40)
    #plt.xlim(0, 8)
    #plt.ylim(-1, 10)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.savefig("plots_3/halo bias.pdf")
    plt.show()

def fv():
    plt.figure(figsize=(20, 20))
    fvv = np.loadtxt("fv.txt", unpack=True)
    #plt.plot(biass[0], abs(biass[1]), label="b1 - dmo")
    plt.plot(fvv[0], fvv[1], label="fv")
    plt.legend(loc="lower right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$Mass[M_{\odot}]$", fontsize=30)
    plt.ylabel("$f(v)$", fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/fv - 1")
    plt.show()

def f_sigma():
    plt.figure(figsize=(20, 20))
    fvv = np.loadtxt("f_sigma.txt", unpack=True)
    fvv_2 = np.loadtxt("f_sigma_2.txt", unpack=True)
    plt.plot(fvv[0], fvv[1], label="$log(f(\sigma))$ Sheth & Tormen")
    plt.plot(fvv[0], fvv_2[1], label="$log(f(\sigma))$ Press & Schechter")
    plt.legend(loc="lower left", fontsize=40)
    #plt.xscale("log")
    #plt.yscale("log")
    plt.xlabel(r'$log(\sigma^{-1})$', fontsize=40)
    plt.ylabel(r'$log(f(\sigma))$', fontsize=40)
    plt.yticks(fontproperties='Times New Roman', size=40)
    plt.xticks(fontproperties='Times New Roman', size=40)
    plt.savefig("plots_3/f_sigma - 1.pdf")
    plt.show()

def fv_v():
    plt.figure(figsize=(20, 20))
    fvv = np.loadtxt("fv_v.txt", unpack=True)
    #plt.plot(biass[0], abs(biass[1]), label="b1 - dmo")
    plt.plot(fvv[0], fvv[1], label="fv*v")
    plt.legend(loc="lower right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$v$", fontsize=30)
    plt.ylabel("$f(v)*v$", fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/fv_v - 1")
    plt.show()

def nu():
    plt.figure(figsize=(20, 20))
    nuu = np.loadtxt("nu.txt", unpack=True)
    #plt.plot(biass[0], abs(biass[1]), label="b1 - dmo")
    plt.plot(nuu[0], nuu[1], label="nu")
    plt.legend(loc="lower right", fontsize=30)
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel("$Mass[M_{\odot}]$", fontsize=30)
    plt.ylabel(r'$\nu$', fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/nu - 1")
    plt.show()

def correlation():
    plt.figure(figsize=(20, 20))
    correlation = np.loadtxt("correlation function - 2.txt", unpack=True)
    plt.plot(correlation[0], correlation[1], label="xi")
    plt.legend(loc="lower right", fontsize=30)
    plt.xlabel("$r$", fontsize=30)
    plt.ylabel("$xi$", fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/correlation function - 1")
    plt.show()

def fractions():
    plt.figure(figsize=(20, 20))
    f_cga_1 = np.loadtxt("data_profiles/f_cga_1.txt", unpack=True)
    f_cga_2 = np.loadtxt("data_profiles/f_cga_2.txt", unpack=True)
    f_star_1 = np.loadtxt("data_profiles/f_star_1.txt", unpack=True)
    f_star_2 = np.loadtxt("data_profiles/f_star_2.txt", unpack=True)
    f_gas_1 = np.loadtxt("data_profiles/f_gas_1.txt", unpack=True)
    f_clm_1 = np.loadtxt("data_profiles/f_clm_1.txt", unpack=True)
    #plt.plot(f_cga_2[0], f_cga_2[1], label="g_{cga}")
    plt.plot(f_cga_2[0], f_cga_2[1], label="g_{cga}")
    plt.plot(f_star_2[0], f_star_2[1], label="g_{star}")
    #plt.plot(f_star_1[0], f_star_1[1], label="g_{star}")
    #plt.plot(f_gas_1[0], f_gas_1[1], label="g_{gas}")
    #plt.plot(f_clm_1[0], f_clm_1[1], label="g_{clm}")
    plt.legend(loc="lower right", fontsize=30)
    #plt.xscale("log")
    #plt.yscale("log")
    plt.xlabel(r'$\eta_{star}$', fontsize=30)
    #plt.xlabel(r'$M_{200}[M_{\odot}/h]$', fontsize=30)
    plt.ylabel(r'$g_{star},g_{cga}$', fontsize=30)
    plt.yticks(fontproperties='Times New Roman', size=30)
    plt.xticks(fontproperties='Times New Roman', size=30)
    plt.savefig("plots_2/fractions - 4")
    plt.show()

correlation()
halo_mass_function()
dn_dm_function()
#sigma_2()
#sigma_2_2()
#fv()
f_sigma()
#nu()
#P_dmo()
#P_dmb()
comparison()
comparison_2()
comparison_density_2()
#bias()
bias_2()
#P_linear()
#P_dmo_2h()
P_dmo_1h_2h()
P_dmb_1h_2h()
density_dmo()
density_dmb()
density_dmb_2()
comparison_density()
ratio_density()
fv_v()
u_func()
u_func_b()
fractions()